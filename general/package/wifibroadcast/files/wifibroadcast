#!/bin/sh
chip=$(ipcinfo -c)
vendor=$(ipcinfo -v)
keydir=/etc

if [ -e /etc/datalink.conf ]; then
	. /etc/datalink.conf
fi

if [ -e /etc/wfb.conf ]; then
	. /etc/wfb.conf
fi

set_mcs() {
	if [ "$vendor" = "ingenic" ]; then
		mcs=$(ls -l /lib/firmware | grep "htc_9271" | awk { 'print $11' } | cut -d "." -f3)
	else
		mcs=$(ls -l /lib/firmware/ath9k_htc | grep "htc_9271-1.4.0.fw" | cut -d "." -f6)
	fi

	if [ -z "$mcs" ]; then
		setmcs "$mcs_index"
	fi

	if [ "$mcs_index" -eq 1 ] || [ "$mcs_index" -eq 3 ]; then
		if [ ! "$mcs_index" -eq "$mcs" ]; then
			setmcs "$mcs_index"
			sleep 3
		fi
	fi
}

detect_wifi_card() {
	devices=$(lsusb | cut -d ' ' -f6 | sort | uniq)
	for card in $devices; do
		case "$card" in
			"0bda:8812" | "0bda:881a" | "0b05:17d2" | "2357:0101" | "2357:010d" | "2604:0012")
				driver="88XXau"
				modprobe 88XXau rtw_tx_pwr_idx_override="$driver_txpower_override"
				;;

			"0bda:a81a")
				driver="8812eu"
				modprobe 8812eu rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0 rtw_tx_npath_enable="$tx_npath"
				;;

			"0bda:f72b" | "0bda:b733")
				driver="8733bu"
				modprobe 8733bu rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0
				;;
				
			"0bda:818b")
				driver="8192eu"
				modprobe 8192eu rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0 rtw_tx_npath_enable="$tx_npath"
				;;
				
			"0bda:c812" | "0bda:c82c")
				driver="88x2cu"
				modprobe 88x2cu rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0 rtw_tx_npath_enable="$tx_npath"
				;;
				
			"0bda:f179")
				driver="8188fu"
				modprobe 8188fu rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0
				;;	
				
			"0cf3:9271" | "040d:3801")
				driver="ar9271"
				if [ "$unit" != "gs" ]; then
					set_mcs
				fi
				modprobe mac80211
				modprobe ath9k_hw txpower="$txpower"
				modprobe ath9k_htc
				;;
		esac
	done

	if [ -z "$driver" ]; then
		echo "USB Wireless module not detected, probing SDIO..."
		modprobe 88x2cs rtw_regd_src=1 rtw_tx_pwr_by_rate=0 rtw_tx_pwr_lmt_enable=0
		if [ "$?" -eq 0 ]; then  # firmware contains 88x2cs driver
			driver="88x2cs"
		fi
	fi
	
	if [ -z "$driver" ]; then
		echo "Wireless module not detected, check the connection."
		exit 1
	else
		echo "Detected: $driver"
	fi

	local n=0
	while ! ifconfig -a | grep -q "$wlan"; do
		if [ "$n" -ge 5 ]; then
			echo "No interface for $wlan, check the connection."
			exit 1
		fi
		sleep 0.5
		n=$((n + 1))
	done
}

load_modules() {
	modprobe cfg80211
	detect_wifi_card
}

load_interface() {
	if [ "$driver" = "ar9271" ]; then
		iwconfig "$wlan" mode monitor
		ifconfig "$wlan" up
	else
		ifconfig "$wlan" up
		iwconfig "$wlan" mode monitor
	fi

	if [ "$driver" = "8812eu" ] || [ "$driver" = "88x2cu" ] || [ "$driver" = "8733bu" ] || [ "$driver" = "88x2cs" ]; then
		iw dev "$wlan" set txpower fixed $((driver_txpower_override * 50))
	fi
	
	if [ "$driver" = "8192eu" ] || [ "$driver" = "8188fu" ]; then
		iw dev "$wlan" set txpower fixed $((txpower * 50))	# 2.4G compat
	fi

	iw reg set "$region"

	if [ -n "$frequency" ]; then
		iwconfig "$wlan" freq "$frequency"
	else
		iwconfig "$wlan" channel "$channel"
	fi
	
	iw dev "$wlan" set monitor none
	iw dev "$wlan" set channel "$channel" HT20
	kernel_main_ver=$(uname -r |cut -d. -f1)
	case "$bandwidth" in
		5)
			case "$driver" in
				"88x2cu" | "8188fu" | "88x2cs")
					if [ "$kernel_main_ver" -ge 4 ]; then
						iw dev "$wlan" set channel "$channel" 5MHz
					fi
				;;
				"8733bu")
					echo "5" > /proc/net/rtl8733bu/$wlan/narrowband
				;;
			esac
		;;

		10)
			case "$driver" in 
				"8812eu" | "88x2cu" | "8188fu" | "88x2cs")
					if [ "$kernel_main_ver" -ge 4 ]; then
						iw dev "$wlan" set channel "$channel" 10MHz
					fi
				;;
				"8733bu")
					echo "10" > /proc/net/rtl8733bu/$wlan/narrowband
				;;
			esac
		;;
		
		40)
			iw dev "$wlan" set channel "$channel" HT40-	# Android App default
		;;
		
		80)
			iw dev "$wlan" set channel "$channel" 80MHz
		;;
		
	esac
	
	need_channel_unlock=1
	pre_channel=$channel
	if [ "$channel" -ge 16 ] && [ "$channel" -lt 36 ]; then
		pre_channel=36
	elif [ "$channel" -gt 64 ] && [ "$channel" -lt 100 ]; then
		pre_channel=64
	elif [ "$channel" -gt 165 ] && [ "$channel" -le 201 ]; then
		pre_channel=165
	else
		need_channel_unlock=0
	fi
	
	if [ "$need_channel_unlock" -eq 1 ] || [ "$kernel_main_ver" -lt 4 ]; then
		if [ "$driver" = "8812eu" ] || [ "$driver" = "8733bu" ] || [ "$driver" = "88x2cs" ]; then
			echo "Channel $channel / $bandwidth needs to be set by /proc... "
			iwconfig "$wlan" channel "$pre_channel"
			case "$driver" in 
				"8812eu")
					echo "$channel $bandwidth" > /proc/net/rtl88x2eu/$wlan/monitor_chan_override
				;;
				"8733bu")
					echo "$channel $bandwidth" > /proc/net/rtl8733bu/$wlan/monitor_chan_override
				;;
				"88x2cs")
					echo "$channel $bandwidth" > /proc/net/rtl88x2cs/$wlan/monitor_chan_override
				;;
			esac
		else 
			echo "Channel $channel / $bandwidth needs /proc to set, but $wlan driver does not support that. "
		fi
	fi
	
	if [ "$driver" = "88x2cu" ] || [ "$driver" = "8812eu" ] || [ "$driver" = "8733bu" ] || [ "$driver" = "88x2cs" ]; then
		case "$driver" in 
				"8812eu")
					echo "$dis_cca" > /proc/net/rtl88x2eu/$wlan/dis_cca
					echo "$edcca_thresh_override_en $edcca_thresh_override" > /proc/net/rtl88x2eu/$wlan/edcca_threshold_jaguar3_override
				;;
				"88x2cu")
					echo "$dis_cca" > /proc/net/rtl88x2cu/$wlan/dis_cca
					echo "$edcca_thresh_override_en $edcca_thresh_override" > /proc/net/rtl88x2cu/$wlan/edcca_threshold_jaguar3_override
				;;
				"8733bu")
					echo "$dis_cca" > /proc/net/rtl8733bu/$wlan/dis_cca
					echo "$edcca_thresh_override_en $edcca_thresh_override" > /proc/net/rtl8733bu/$wlan/edcca_threshold_jaguar3_override
				;;
				"88x2cs")
					echo "$dis_cca" > /proc/net/rtl88x2cs/$wlan/dis_cca
					echo "$edcca_thresh_override_en $edcca_thresh_override" > /proc/net/rtl88x2cs/$wlan/edcca_threshold_jaguar3_override
				;;
			esac
	fi
	
	if [ "$driver" = "88x2cu" ] || [ "$driver" = "8812eu" ] || [ "$driver" = "88x2cs" ]; then
		if [ "$bf_mon_en" -eq 1 ]; then
			bf_local_mac=$(iw "$wlan" info|grep addr|cut -d " " -f 2)
			if [ "$driver" = "88x2cu" ]; then 
				driver_path=rtl88x2cu
			elif [ "$driver" = "8812eu" ]; then 
				driver_path=rtl88x2eu
			elif [ "$driver" = "88x2cs" ]; then 
				driver_path=rtl88x2cs
			fi
			bf_mon.sh start "$driver_path" "$wlan" "$bf_local_mac" "$bf_remote_mac" "$bandwidth" "$bf_ackto" "$bf_interval" &
		fi
	fi
}

start_drone_wfb() {
	bandwidth_wfb=$bandwidth
	if [ "$bandwidth_wfb" -eq 5 ]; then
		bandwidth_wfb=20
	fi
	vht_mode_wfb=""
        if [ "$vht_mode" -eq 1 ]; then
                vht_mode_wfb="-V"
        fi
	wfb_tx -p "$stream" -u "$udp_port" -R "$rcv_buf" -K "$keydir/$unit.key" -B "$bandwidth_wfb" \
		-M "$mcs_index" -N "$vht_nss" -S "$stbc" -L "$ldpc" -G "$guard_interval" -k "$fec_k" -n "$fec_n" \
		-T "$pool_timeout" -i "$link_id" -f "$frame_type" $vht_mode_wfb -C 8000 "$wlan" > /dev/null &
}

start_gs_wfb() {
	wfb_rx -c "$udp_addr" -u "$udp_port" -p "$stream" -K "$keydir/$unit.key" -i "$link_id" "$wlan" > /dev/null &
}

start_tunnel_wfb() {
	if [ ! -e /usr/bin/tunnel_rx ] || [ ! -e /usr/bin/tunnel_tx ]; then
		ln -fs /usr/bin/wfb_rx /usr/bin/tunnel_rx
		ln -fs /usr/bin/wfb_tx /usr/bin/tunnel_tx
	fi

	tunnel_rx -p 160 -u 5800 -K "$keydir/$unit.key" -i "$link_id" "$wlan" > /dev/null &
	tunnel_tx -p 32 -u 5801 -K "$keydir/$unit.key" -M "$mcs_index" -S "$stbc" -L "$ldpc" \
		-k "$fec_k" -n "$fec_n" -i "$link_id" "$wlan" > /dev/null &
	wfb_tun -a 10.5.0.10/24 > /dev/null &
}

case "$1" in
	start)
		if [ "$daemon" -eq 1 ]; then
			echo "Loading modules and wireless driver..."
			load_modules
			load_interface

			if ! cat "$keydir/$unit.key" > /dev/null 2>&1; then
				echo "Generating drone & ground station keys..."
				cd $keydir && wfb_keygen
			fi

			start_${unit}_wfb

			if [ "$telemetry" = "true" ]; then
				if [ "$chip" = "gk7205v200" ]; then
					devmem 0x120C0010 32 0x1E04
				elif [ "$chip" = "ssc33x" ]; then
					devmem 0x1F207890 16 0x8
				fi
				telemetry start
			fi

			if [ "$tunnel" = "true" ]; then
				start_tunnel_wfb
			fi
		else
			echo "Wifibroadcast service disabled in wfb.conf"
		fi
		;;

	stop)
		echo "Stopping wifibroadcast service..."
		killall -q wfb_tx
		killall -q wfb_rx

		if [ "$telemetry" = "true" ]; then
			telemetry stop
		fi

		if [ "$tunnel" = "true" ]; then
			killall -q tunnel_rx
			killall -q tunnel_tx
			killall -q wfb_tun
		fi
		;;

	*)
		echo "Usage: $0 {start|stop}"
		exit 1
		;;
esac
